#include "arrayList.hpp"


#include<cstdio>



template <typename T>

ArrayList<T>::ArrayList(int n) : _length(n), _size(0), _array(new T[n]) {}


template <typename T>
void ArrayList<T>::add(T t){
  if(this->_size >= this->_length)
    this->expand();

  this->_array[this->_size++] = t;
}

template <typename T>
void ArrayList<T>::insert(int index, T t){

  this->add(NULL);
  for(int i = this->_size; i > index; i--){
    this->_array[i] = this->_array[i-1];
  }

  this->_array[index] = t;
}


template <typename T>
void ArrayList<T>::expand(){
  T* new_array = new T[this->_length << 1];
  for(int i = 0; i < this->_length; i++){
    new_array[i] = this->_array[i];
  }

  delete [] this->_array;
  this->_array = new_array;
  this->_length = this->_length << 1;

  printf("expand an array to %d, size is %d\n",this->_length,this->_size);
}


template <typename T> int ArrayList<T>::size() { return this->_size; }

template <typename T> int ArrayList<T>::length() { return this->_length; }

template <typename T> T ArrayList<T>::get(int index) { return _array[index]; }

template <typename T>
void ArrayList<T>::set(int index,T t){
  if(this->_size <= index)
    this->_size = index + 1;

  while(this->_size > this->_length)
    this->expand();

  this->_array[index] = t;
}

template <typename T>
T ArrayList<T>::pop(){
  return this->_array[--this->_size];
}
